apply plugin: 'war'
apply plugin: 'eclipse-wtp'


// project defs
def entitiesBasePackage = 'com.hectorlopezfernandez.model'
project.version = '0.10.1'


configurations {
   weave
   jettyRunner
   jettyRuntimeClasspath
}

dependencies {
   // some common dependencies are configured in the root build.gradle

   providedCompile 'commons-logging:commons-logging:1.2'
   providedCompile 'log4j:log4j:1.2.17'
   providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
   providedCompile 'javax.servlet.jsp:jsp-api:2.2'

   compile 'javax.inject:javax.inject'
   compile 'com.google.inject:guice'
   compile 'net.sourceforge.stripes:stripes'
   compile('org.apache.openjpa:openjpa') {
      exclude group: 'junit'
   }
   compile 'org.apache.lucene:lucene-core'
   compile 'org.apache.lucene:lucene-analyzers-common'
   compile 'org.apache.lucene:lucene-queryparser'
   compile 'org.apache.lucene:lucene-highlighter'
   compile 'joda-time:joda-time'
   compile 'joda-time:joda-time-jsptags'
   compile 'org.apache.commons:commons-lang3'
   compile 'org.apache.shiro:shiro-web'
   compile 'net.sourceforge.nekohtml:nekohtml'
   compile('org.owasp.antisamy:antisamy') {
      exclude group: 'commons-httpclient'
   }
   compile 'com.google.guava:guava'
   compile 'org.apache.taglibs:taglibs-standard-spec'
   compile 'com.fasterxml.jackson.core:jackson-databind'
   compile('com.hectorlopezfernandez.pebble:stripes-extension') {
      exclude group: 'javax.servlet', module: 'servlet-api'
   }
   compile 'com.hectorlopezfernandez.pebble:joda-time-extension'
   compile 'com.hectorlopezfernandez.pebble:shiro-extension'

   runtime 'commons-lang:commons-lang'
   runtime 'commons-pool:commons-pool'
   runtime 'commons-beanutils:commons-beanutils'
   runtime 'commons-collections:commons-collections'
   runtime 'org.apache.taglibs:taglibs-standard-impl'

   weave 'org.apache.openjpa:openjpa'
   weave 'org.slf4j:jcl-over-slf4j'
   weave 'joda-time:joda-time'
   weave 'ch.qos.logback:logback-classic'
   
   jettyRunner 'org.eclipse.jetty:jetty-runner:9.2.10.v20150310'
   jettyRunner 'org.eclipse.jetty:jetty-start:9.2.10.v20150310'
   jettyRunner 'org.springframework:springloaded:1.2.5.RELEASE'
   jettyRuntimeClasspath 'org.apache.commons:commons-dbcp2:2.1.1'
   jettyRuntimeClasspath 'mysql:mysql-connector-java:5.1.38'
   
   testCompile 'junit:junit:4.12'
   testCompile 'org.jetbrains.kotlin:kotlin-stdlib:1.0.1-2'
}

compileJava {
   destinationDir file("$buildDir/compiled-classes")
}

war {
   from "$buildDir/env-dependent-webcontent"
}


// environment dependent resources

task processDevelopmentResources(type: Copy, dependsOn: processResources) {
   from 'env/dev/resources'
   into processResources.destinationDir
   onlyIf { !gradle.taskGraph.hasTask(release) }
}
task processDevelopmentWebInf(type: Sync, dependsOn: processResources) {
   from 'env/dev/web-inf'
   into "$buildDir/env-dependent-webcontent/WEB-INF"
   onlyIf { !gradle.taskGraph.hasTask(release) }
}
task processReleaseResources(type: Copy, dependsOn: processResources) {
   from 'env/prod/resources'
   into processResources.destinationDir
   onlyIf { gradle.taskGraph.hasTask(release) }
}
task processReleaseWebInf(type: Sync, dependsOn: processResources) {
   from 'env/prod/web-inf'
   into "$buildDir/env-dependent-webcontent/WEB-INF"
   onlyIf { gradle.taskGraph.hasTask(release) }
}


// jpa weaving

task copyNonPersistentClasses(type: Copy, dependsOn: compileJava) {
   from "$buildDir/compiled-classes"
   into sourceSets.main.output.classesDir
   exclude '**/' + entitiesBasePackage.replaceAll('\\.','/') + '/**'
   includeEmptyDirs = false
}
task copyPersistentClasses(type: Copy, dependsOn: compileJava) {
   from "$buildDir/compiled-classes"
   into "$buildDir/unwoven-persistent-classes"
   include '**/' + entitiesBasePackage.replaceAll('\\.','/') + '/**'
   includeEmptyDirs = false
}
task weaveJpaEntities(type: JavaExec) {
   main = 'org.apache.openjpa.enhance.PCEnhancer'
   classpath configurations.weave.incoming.files
   doFirst {
      classpath copyPersistentClasses.destinationDir
      args '-tcl'
      args 'false'
      args '-d'
      args sourceSets.main.output.classesDir.absolutePath
      args '-p'
      args fileTree(processResources.destinationDir).matching({pattern -> pattern.include('**/META-INF/persistence.xml')}).singleFile.absolutePath
   }

   inputs.files fileTree(copyPersistentClasses.destinationDir),fileTree(processResources.destinationDir).matching({pattern -> pattern.include('**/META-INF/persistence.xml')})
   outputs.dir sourceSets.main.output.classesDir
}
weaveJpaEntities.dependsOn copyPersistentClasses,processDevelopmentResources,processDevelopmentWebInf,processReleaseResources,processReleaseWebInf


// assembling of the final webcontent dir

task assembleEnvDependentWebContent(type: Copy, dependsOn: [copyNonPersistentClasses,weaveJpaEntities]) {
   from 'WebContent'
   into "$buildDir/env-dependent-webcontent"
}
classes.dependsOn assembleEnvDependentWebContent


// local jetty run

task deployOnLocalJetty(type: JavaExec) {
   classpath configurations.jettyRunner.incoming.files
   main = '-javaagent:'+configurations.jettyRunner.incoming.files.asFileTree.matching({pattern -> pattern.include('**/springloaded*.jar')}).singleFile.absolutePath
   args '-noverify'
   args '-jar'
   args configurations.jettyRunner.incoming.files.asFileTree.matching({pattern -> pattern.include('**/jetty-runner*.jar')}).singleFile.absolutePath
   configurations.jettyRuntimeClasspath.incoming.files.asFileTree.visit({
      fileDetails -> args '--jar'; args fileDetails.file.absolutePath
   })
   configurations.runtime.incoming.files.asFileTree.visit({
      fileDetails -> args '--jar'; args fileDetails.file.absolutePath
   })
   args '--classes'
   args sourceSets.main.output.classesDir
   args '--classes'
   args sourceSets.main.output.resourcesDir
   args '--stop-port'
   args '8181'
   args '--stop-key'
   args 'abc123'
   args '--out'
   args "$buildDir/jetty-output.log"
   args '--config'
   args "$buildDir/jetty.xml"
   args "$buildDir/env-dependent-webcontent"

   doFirst {
      copy {
         from "$rootDir/jetty/jetty.xml"; into "$buildDir"; expand(keystorePath: "$buildDir/key.store")
      }
      copy {
         from "$rootDir/jetty/key.store"; into "$buildDir"
      }
   }
}
task stopLocalJetty(type: JavaExec) {
   classpath configurations.jettyRunner.incoming.files
   main = '-jar'
   args configurations.jettyRunner.incoming.files.asFileTree.matching({pattern -> pattern.include('**/jetty-start*.jar')}).singleFile.absolutePath
   args 'STOP.PORT=8181'
   args 'STOP.KEY=abc123'
   args '--stop'
}
deployOnLocalJetty.mustRunAfter classes
deployOnLocalJetty.mustRunAfter stopLocalJetty
run.dependsOn deployOnLocalJetty
stop.dependsOn stopLocalJetty
restart.dependsOn deployOnLocalJetty, stopLocalJetty